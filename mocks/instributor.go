// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Instributor is an autogenerated mock type for the Instributor type
type Instributor struct {
	mock.Mock
}

type Instributor_Expecter struct {
	mock *mock.Mock
}

func (_m *Instributor) EXPECT() *Instributor_Expecter {
	return &Instributor_Expecter{mock: &_m.Mock}
}

// Acquire provides a mock function with given fields: ctx
func (_m *Instributor) Acquire(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Instributor_Acquire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acquire'
type Instributor_Acquire_Call struct {
	*mock.Call
}

// Acquire is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Instributor_Expecter) Acquire(ctx interface{}) *Instributor_Acquire_Call {
	return &Instributor_Acquire_Call{Call: _e.mock.On("Acquire", ctx)}
}

func (_c *Instributor_Acquire_Call) Run(run func(ctx context.Context)) *Instributor_Acquire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Instributor_Acquire_Call) Return(_a0 string, _a1 error) *Instributor_Acquire_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Instributor_Acquire_Call) RunAndReturn(run func(context.Context) (string, error)) *Instributor_Acquire_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx, key
func (_m *Instributor) Refresh(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Instributor_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type Instributor_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Instributor_Expecter) Refresh(ctx interface{}, key interface{}) *Instributor_Refresh_Call {
	return &Instributor_Refresh_Call{Call: _e.mock.On("Refresh", ctx, key)}
}

func (_c *Instributor_Refresh_Call) Run(run func(ctx context.Context, key string)) *Instributor_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Instributor_Refresh_Call) Return(_a0 error) *Instributor_Refresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Instributor_Refresh_Call) RunAndReturn(run func(context.Context, string) error) *Instributor_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with given fields: ctx, key
func (_m *Instributor) Release(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Instributor_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type Instributor_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Instributor_Expecter) Release(ctx interface{}, key interface{}) *Instributor_Release_Call {
	return &Instributor_Release_Call{Call: _e.mock.On("Release", ctx, key)}
}

func (_c *Instributor_Release_Call) Run(run func(ctx context.Context, key string)) *Instributor_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Instributor_Release_Call) Return(_a0 error) *Instributor_Release_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Instributor_Release_Call) RunAndReturn(run func(context.Context, string) error) *Instributor_Release_Call {
	_c.Call.Return(run)
	return _c
}

// NewInstributor creates a new instance of Instributor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstributor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Instributor {
	mock := &Instributor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
